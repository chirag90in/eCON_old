x.axis.size <- 6                                        # adjust x-axis label sizes
# here is where you can change information about the graph and add other characteristics using ggplot and ggridges
ggplot(dataset, aes(x = x.values, y = as.numeric(reorder(y.values, y.values.RO)),
fill = distrib.fill, group = group)) +                        # scale = spacing, alpha = transparency
coord_cartesian(xlim = c(-0.25, 0.25)) +
stat_density_ridges(quantile_lines = TRUE,
quantiles = 2,
alpha = .95,
scale = 2.55,
color = "black",
size = .35
) +            # divide into two quantiles (show mean)
geom_vline(xintercept = 0, linetype="solid",color = "black",alpha = .95, size = .45) +    #create line at X = 0
scale_fill_gradientn(colors = viridis_pal(direction = 1, option = "inferno")(20),                         # set gradient
limits = c(.85,1),                                # which probabilites matter?
na.value = "#909497",                                # if not in limits, gray out
name = legend.title) +                            # name legend
scale_y_continuous(breaks = 1:length(rois),                            # A VERY HACK-Y WAY TO HAVE TWO Y AXES W DISCRETE DATA
expand = c(0,0),
labels = y.axis.labs,                               # Trick ggplot into thinking data is continuous...
sec.axis = sec_axis(~.,                             # Second axis to show probabilities
breaks = 1:length(rois),
labels = sec.y.axis.labs)) +
#theme_ridges(font_size = label.size, grid = TRUE, center_axis_labels = TRUE) +  # theme info
#ggtitle(graph.title)+
#theme_bw() +# graph title
#theme_ridges(grid = FALSE) +
theme(
panel.background = element_blank(),
legend.position = "none",
#panel.grid.major.y = element_line(color = "grey"),
plot.title = element_text(hjust = 0.5, size = title.size),            # plot title size and position
axis.text.y = element_text(size=label.size),                               # y-axis text size
axis.line.x = element_line(color = "gray"),
axis.text.y.right = element_text(size = label.size),                  # y-axis info for right axis
axis.text.x = element_text(size = x.axis.size),
#plot.margin = unit(c(0,0,0,0), "cm"),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
legend.title.align = 5)+
guides(shape = guide_legend(label.position = "bottom",
title.positon = "bottom",
title.vjust = 0.4)) +
labs(
x = NULL,                                                         # Add or not add X and Y labels
y = NULL) +
scale_x_continuous(breaks = x.labs.pos, labels = c(x.axis.labs))
ggsave(file = paste0(strsplit(type,'.RData'),".jpg", sep=""), width=4.5, height=3, units = "in", dpi = 900)
# preview will look smooshed, be sure to look at the saved .jpg before making any changes to text size, etc!
#graph
# WARNING: will clear R environment, if you have other projects open be sure you have everything saved that you want!
rm(list=ls())
# CHANGE THIS TO CURRENT FILE PATH
#work_dir <- 'C:/Users/climbach/Box/Box/UMD/Project_UMD/eCON/RBA'  #MAC
work_dir <- 'C:/Users/Chirag/Box/Box/UMD/Project_UMD/eCON/RBA' # home HP
setwd(work_dir)
# IMPORT LIBRARIES:
library(data.table)
library(ggplot2)
library(ggridges)
library(dplyr)
library(tidyr)
library(scales)
library(viridis)
print(cat("Current working dir: ", work_dir))
#change any ROI labels here:
# DO NOT CHANGE ORDER -- set up to match imported datasheets, can be re-organized in the data set-up area below
# read in data, get rid of extra X column from import
dir <- c("uncon_v_con_ROI24_with_covariates_allStudent")
types <- c(paste0(dir,"/",dir,".RData"))
for (type in types){
load(type)
data <- data.frame(ps0)
}
rois <- colnames(data)
data$X <- NULL
nobj=dim(data)[1]
# rename columns with ROI list
# colnames(data) <- rois
data_stats = data.frame(1:length(rois))
# create ROI column instead of numerics to match threat table above
data_stats$ROI <- rois
data_stats$mean <- colMeans(data)
data_stats$P <- colSums(data > 0)/nobj
data_stats$Pn <- data_stats$P
for (i in 1:length(rois)) {
if (data_stats$P[i]<.5){data_stats$Pn[i]=1-data_stats$P[i]}
}
# this will order the distributions correctly
data_stats <- data_stats[order(data_stats$mean),]
data_trans <- as.data.frame(t(as.matrix(data)))
data_trans <- tibble::rownames_to_column(data_trans, "ROI")
data_trans$X <- 1:nrow(data_trans)
# merge values & stats into one table by ROI
data_merge <- merge(data_stats, data_trans, by = "ROI")
data_merge <- data_merge[order(data_merge$X),]
# Transform data into long form
# Melt dataframe by ROI
library(data.table)
data_long <- melt(data_trans, id=c("ROI","X"))
#threat_long <- melt(threat_trans, id=c("ROI","X.x"))
data_long <- data_long[order(data_long$X),]
# This is incredibly clunky, but for the sake of time adding stats by ensuring orders are all the same and repeating each value 2000 times... Tried a few different methods with no success for some reason.
data_long$mean <- rep(data_merge$mean, each = nobj)
data_long$P <- rep(data_merge$P, each =nobj)
data_long$Pn <- rep(data_merge$Pn, each =nobj)
# set your labels here so you don't have to change within the plot below:
format(round(1, 2), nsmall = 2)
y.axis.labs <- format(round(data_stats$P,2), nsmall = 2)                        # y axis labels
sec.y.axis.labs <- data_stats$ROI                             # second y axis labels (probabilities)
# X AXIS LABELS NEED TO CHANGE TO CORRESPOND TO DATA SET! UNCOMMENT WHICHEVER MATCHES
# Uncomment for THREAT
x.axis.labs <- c( "Control > Uncontrol", "0", "Uncontrol > Control")                 # x axis labels  THREAT
x.labs.pos <- c(-0.15, 0, 0.15)                                             # x axis position THREAT
# Uncomment for VALENCE
#x.axis.labs <- c("Neutral > Positive", "0", "Positive > Neutral")         # x axis labels  VALENCE
#x.labs.pos  <- c(-0.1,0,0.2)                                              # x axis position VALENCE
# Uncomment for INTERACTION
#x.axis.labs <- NULL                                                       # x axis labels  INTERACTION, not sure what to put.
#x.labs.pos <- NULL                                                        # a axis position INTERACTION, change when labels decided
#graph.title <- data.name                                   # graph title
legend.title <- "Probability"                              # legend title
y.axis.title <- NULL                                       # for now ...
x.axis.title <- NULL                                       # for now...
# GRAPH DATA
dataset <- data_long
x.values <- data_long$value                               # x values
y.values <- data_long$ROI                                 # y values
y.values.RO <- data_long$value                            # values to reorder Y by
distrib.fill <- data_long$Pn                              # fill graph with probabilities
group <- data_long$ROI
# Other aspects
gradient.colors <- c("yellow","#C9182B","#41245C")        # change gradient colors here (currently, yellow - purple)
label.size <- 6                                         # adjust ROI and probability y-axis font size
title.size <- 14                                          # adjust graph title size
x.axis.size <- 6                                        # adjust x-axis label sizes
# here is where you can change information about the graph and add other characteristics using ggplot and ggridges
ggplot(dataset, aes(x = x.values, y = as.numeric(reorder(y.values, y.values.RO)),
fill = distrib.fill, group = group)) +                        # scale = spacing, alpha = transparency
coord_cartesian(xlim = c(-0.25, 0.25)) +
stat_density_ridges(quantile_lines = TRUE,
quantiles = 2,
alpha = .95,
scale = 2.55,
color = "black",
size = .35
) +            # divide into two quantiles (show mean)
geom_vline(xintercept = 0, linetype="solid",color = "black",alpha = .95, size = .45) +    #create line at X = 0
scale_fill_gradientn(colors = viridis_pal(direction = 1, option = "inferno")(20),                         # set gradient
limits = c(.85,1),                                # which probabilites matter?
na.value = "#909497",                                # if not in limits, gray out
name = legend.title) +                            # name legend
scale_y_continuous(breaks = 1:length(rois),                            # A VERY HACK-Y WAY TO HAVE TWO Y AXES W DISCRETE DATA
expand = c(0,0),
labels = y.axis.labs,                               # Trick ggplot into thinking data is continuous...
sec.axis = sec_axis(~.,                             # Second axis to show probabilities
breaks = 1:length(rois),
labels = sec.y.axis.labs)) +
#theme_ridges(font_size = label.size, grid = TRUE, center_axis_labels = TRUE) +  # theme info
#ggtitle(graph.title)+
#theme_bw() +# graph title
#theme_ridges(grid = FALSE) +
theme(
panel.background = element_blank(),
legend.position = "none",
#panel.grid.major.y = element_line(color = "grey"),
plot.title = element_text(hjust = 0.5, size = title.size),            # plot title size and position
axis.text.y = element_text(size=label.size),                               # y-axis text size
axis.line.x = element_line(color = "gray"),
axis.text.y.right = element_text(size = label.size),                  # y-axis info for right axis
axis.text.x = element_text(size = x.axis.size),
#plot.margin = unit(c(0,0,0,0), "cm"),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
legend.title.align = 5)+
guides(shape = guide_legend(label.position = "bottom",
title.positon = "bottom",
title.vjust = 0.4)) +
labs(
x = NULL,                                                         # Add or not add X and Y labels
y = NULL) +
scale_x_continuous(breaks = x.labs.pos, labels = c(x.axis.labs))
ggsave(file = paste0(strsplit(type,'.RData'),".jpg", sep=""), width=4.5, height=3, units = "in", dpi = 900)
# preview will look smooshed, be sure to look at the saved .jpg before making any changes to text size, etc!
#graph
# WARNING: will clear R environment, if you have other projects open be sure you have everything saved that you want!
rm(list=ls())
# CHANGE THIS TO CURRENT FILE PATH
#work_dir <- 'C:/Users/climbach/Box/Box/UMD/Project_UMD/eCON/RBA'  #MAC
work_dir <- 'C:/Users/Chirag/Box/Box/UMD/Project_UMD/eCON/RBA' # home HP
setwd(work_dir)
# IMPORT LIBRARIES:
library(data.table)
library(ggplot2)
library(ggridges)
library(dplyr)
library(tidyr)
library(scales)
library(viridis)
print(cat("Current working dir: ", work_dir))
#change any ROI labels here:
# DO NOT CHANGE ORDER -- set up to match imported datasheets, can be re-organized in the data set-up area below
# read in data, get rid of extra X column from import
dir <- c("uncon_v_con_ROI24_with_covariates_allGaussian")
types <- c(paste0(dir,"/",dir,".RData"))
for (type in types){
load(type)
data <- data.frame(ps0)
}
rois <- colnames(data)
data$X <- NULL
nobj=dim(data)[1]
# rename columns with ROI list
# colnames(data) <- rois
data_stats = data.frame(1:length(rois))
# create ROI column instead of numerics to match threat table above
data_stats$ROI <- rois
data_stats$mean <- colMeans(data)
data_stats$P <- colSums(data > 0)/nobj
data_stats$Pn <- data_stats$P
for (i in 1:length(rois)) {
if (data_stats$P[i]<.5){data_stats$Pn[i]=1-data_stats$P[i]}
}
# this will order the distributions correctly
data_stats <- data_stats[order(data_stats$mean),]
data_trans <- as.data.frame(t(as.matrix(data)))
data_trans <- tibble::rownames_to_column(data_trans, "ROI")
data_trans$X <- 1:nrow(data_trans)
# merge values & stats into one table by ROI
data_merge <- merge(data_stats, data_trans, by = "ROI")
data_merge <- data_merge[order(data_merge$X),]
# Transform data into long form
# Melt dataframe by ROI
library(data.table)
data_long <- melt(data_trans, id=c("ROI","X"))
#threat_long <- melt(threat_trans, id=c("ROI","X.x"))
data_long <- data_long[order(data_long$X),]
# This is incredibly clunky, but for the sake of time adding stats by ensuring orders are all the same and repeating each value 2000 times... Tried a few different methods with no success for some reason.
data_long$mean <- rep(data_merge$mean, each = nobj)
data_long$P <- rep(data_merge$P, each =nobj)
data_long$Pn <- rep(data_merge$Pn, each =nobj)
# set your labels here so you don't have to change within the plot below:
format(round(1, 2), nsmall = 2)
y.axis.labs <- format(round(data_stats$P,2), nsmall = 2)                        # y axis labels
sec.y.axis.labs <- data_stats$ROI                             # second y axis labels (probabilities)
# X AXIS LABELS NEED TO CHANGE TO CORRESPOND TO DATA SET! UNCOMMENT WHICHEVER MATCHES
# Uncomment for THREAT
x.axis.labs <- c( "Control > Uncontrol", "0", "Uncontrol > Control")                 # x axis labels  THREAT
x.labs.pos <- c(-0.15, 0, 0.15)                                             # x axis position THREAT
# Uncomment for VALENCE
#x.axis.labs <- c("Neutral > Positive", "0", "Positive > Neutral")         # x axis labels  VALENCE
#x.labs.pos  <- c(-0.1,0,0.2)                                              # x axis position VALENCE
# Uncomment for INTERACTION
#x.axis.labs <- NULL                                                       # x axis labels  INTERACTION, not sure what to put.
#x.labs.pos <- NULL                                                        # a axis position INTERACTION, change when labels decided
#graph.title <- data.name                                   # graph title
legend.title <- "Probability"                              # legend title
y.axis.title <- NULL                                       # for now ...
x.axis.title <- NULL                                       # for now...
# GRAPH DATA
dataset <- data_long
x.values <- data_long$value                               # x values
y.values <- data_long$ROI                                 # y values
y.values.RO <- data_long$value                            # values to reorder Y by
distrib.fill <- data_long$Pn                              # fill graph with probabilities
group <- data_long$ROI
# Other aspects
gradient.colors <- c("yellow","#C9182B","#41245C")        # change gradient colors here (currently, yellow - purple)
label.size <- 6                                         # adjust ROI and probability y-axis font size
title.size <- 14                                          # adjust graph title size
x.axis.size <- 6                                        # adjust x-axis label sizes
# here is where you can change information about the graph and add other characteristics using ggplot and ggridges
ggplot(dataset, aes(x = x.values, y = as.numeric(reorder(y.values, y.values.RO)),
fill = distrib.fill, group = group)) +                        # scale = spacing, alpha = transparency
coord_cartesian(xlim = c(-0.25, 0.25)) +
stat_density_ridges(quantile_lines = TRUE,
quantiles = 2,
alpha = .95,
scale = 2.55,
color = "black",
size = .35
) +            # divide into two quantiles (show mean)
geom_vline(xintercept = 0, linetype="solid",color = "black",alpha = .95, size = .45) +    #create line at X = 0
scale_fill_gradientn(colors = viridis_pal(direction = 1, option = "inferno")(20),                         # set gradient
limits = c(.85,1),                                # which probabilites matter?
na.value = "#909497",                                # if not in limits, gray out
name = legend.title) +                            # name legend
scale_y_continuous(breaks = 1:length(rois),                            # A VERY HACK-Y WAY TO HAVE TWO Y AXES W DISCRETE DATA
expand = c(0,0),
labels = y.axis.labs,                               # Trick ggplot into thinking data is continuous...
sec.axis = sec_axis(~.,                             # Second axis to show probabilities
breaks = 1:length(rois),
labels = sec.y.axis.labs)) +
#theme_ridges(font_size = label.size, grid = TRUE, center_axis_labels = TRUE) +  # theme info
#ggtitle(graph.title)+
#theme_bw() +# graph title
#theme_ridges(grid = FALSE) +
theme(
panel.background = element_blank(),
legend.position = "none",
#panel.grid.major.y = element_line(color = "grey"),
plot.title = element_text(hjust = 0.5, size = title.size),            # plot title size and position
axis.text.y = element_text(size=label.size),                               # y-axis text size
axis.line.x = element_line(color = "gray"),
axis.text.y.right = element_text(size = label.size),                  # y-axis info for right axis
axis.text.x = element_text(size = x.axis.size),
#plot.margin = unit(c(0,0,0,0), "cm"),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
legend.title.align = 5)+
guides(shape = guide_legend(label.position = "bottom",
title.positon = "bottom",
title.vjust = 0.4)) +
labs(
x = NULL,                                                         # Add or not add X and Y labels
y = NULL) +
scale_x_continuous(breaks = x.labs.pos, labels = c(x.axis.labs))
ggsave(file = paste0(strsplit(type,'.RData'),".jpg", sep=""), width=4.5, height=3, units = "in", dpi = 900)
# preview will look smooshed, be sure to look at the saved .jpg before making any changes to text size, etc!
#graph
plot(cars)
df <- read.table('uncon_v_con_rBNST_with_covariates.txt')
df <- read.table('uncon_v_con_rBNST_with_covariates.txt')
View(df)
View(df)
df <- read.csv('uncon_v_con_rBNST_with_covariates.txt')
df <- read.csv('uncon_v_con_rBNST_with_covariates.txt')
View(df)
View(df)
df <- read.table('uncon_v_con_rBNST_with_covariates.txt',header=True)
?read.delim
df <- read.table('uncon_v_con_rBNST_with_covariates.txt',header=TRUE)
View(df)
View(df)
install.packages("brms")
library(brms)
df <- read.table('uncon_v_con_rBNST_with_covariates.txt',header=TRUE)
df <- read.table('uncon_v_con_rBNST_with_covariates.txt',header=TRUE)
View(df)
View(df)
View(df)
View(df)
?prior
View(df)
View(df)
?normal
?normal
prior1 <- c(prior(normal(0,100),class=Intercept),
prior(normal(0,100),class=b, coef="TRAITmean"),
prior(normal(0,100),class=b, coef="TRAITdiff"),
prior(normal(0,100),class=b, coef="STATEmean"),
prior(normal(0,100),class=b, coef="STATEdiff"),
prior(cauchy(0,100),class=sigma)
)
View(prior1)
View(prior1)
View(prior1)
View(prior1)
bmod1 <- brm(Y ~ TRAITmean + TRAITdiff + STATEmean + STATEdiff,
data = df,
family = gaussian(),
prior = prior1,
warmup = 2000, iter = 5000)
setwd("C:/Users/Chirag/Box/Box/UMD/Project_UMD/eCON/RBA/uncon_v_con_rBNST_with_covariates")
library(brms)
setwd("C:/Users/Chirag/Box/Box/UMD/Project_UMD/eCON/RBA/uncon_v_con_rBNST_with_covariates")
df <- read.table('uncon_v_con_rBNST_with_covariates.txt',header=TRUE)
prior1 <- c(prior(normal(0,100),class=Intercept),
prior(normal(0,100),class=b, coef="TRAITmean"),
prior(normal(0,100),class=b, coef="TRAITdiff"),
prior(normal(0,100),class=b, coef="STATEmean"),
prior(normal(0,100),class=b, coef="STATEdiff"),
prior(cauchy(0,100),class=sigma)
)
library(brms)
setwd("C:/Users/Chirag/Box/Box/UMD/Project_UMD/eCON/RBA/uncon_v_con_rBNST_with_covariates")
df <- read.table('uncon_v_con_rBNST_with_covariates.txt',header=TRUE)
prior1 <- c(prior(normal(0,100),class=Intercept),
prior(normal(0,100),class=b, coef="TRAITmean"),
prior(normal(0,100),class=b, coef="TRAITdiff"),
prior(normal(0,100),class=b, coef="STATEmean"),
prior(normal(0,100),class=b, coef="STATEdiff"),
prior(cauchy(0,100),class=sigma)
)
bmod1 <- brm(Y ~ TRAITmean + TRAITdiff + STATEmean + STATEdiff,
data = df,
family = gaussian(),
prior = prior1,
warmup = 2000, iter = 5000)
library(brms) # for the analysis
library(haven) # to load the SPSS .sav file
install.packages("haven")
install.packages("haven")
install.packages("haven")
install.packages("haven")
install.packages("haven")
install.packages("haven")
install.packages("haven")
install.packages("tidyverse")
install.packages("RColorBrewer")
install.packages("ggmcmc")
install.packages("ggthemes")
install.packages("ggridges")
popular2data <- read_sav(file = "https://github.com/MultiLevelAnalysis/Datasets-third-edition-Multilevel-book/blob/master/chapter%202/popularity/SPSS/popular2.sav?raw=true")
popular2data <- read_sav(file = "popular2.sav")
setwd("C:/Users/Chirag/Box/Box/UMD/Project_UMD/eCON/RBA/uncon_v_con_rBNST_with_covariates")
df <- read.table('uncon_v_con_rBNST_with_covariates.txt',header=TRUE)
prior1 <- c(prior(normal(0,100),class=Intercept),
prior(normal(0,100),class=b, coef="TRAITmean"),
prior(normal(0,100),class=b, coef="TRAITdiff"),
prior(normal(0,100),class=b, coef="STATEmean"),
prior(normal(0,100),class=b, coef="STATEdiff"),
prior(cauchy(0,100),class=sigma)
)
library(brms) # for the analysis
library(haven) # to load the SPSS .sav file
library(brms) # for the analysis
#library(haven) # to load the SPSS .sav file
library(tidyverse) # needed for data manipulation.
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(brms) # for the analysis
#library(haven) # to load the SPSS .sav file
library(tidyverse) # needed for data manipulation.
update("rlang")
install.packages("rlang")
install.packages("rlang")
library(rlang)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
remove.packages("rlang", lib="~/R/win-library/3.6")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(brms) # for the analysis
#library(haven) # to load the SPSS .sav file
library(tidyverse) # needed for data manipulation.
library(RColorBrewer) # needed for some extra colours in one of the graphs
library(ggmcmc)
library(ggthemes)
library(ggridges)
detach("package:Rcpp", unload = TRUE)
detach("package:RColorBrewer", unload = TRUE)
detach("package:purrr", unload = TRUE)
remove.packages("readr", lib="~/R/win-library/3.6")
install.packages("readr")
install.packages("readr")
library(brms) # for the analysis
#library(haven) # to load the SPSS .sav file
library(tidyverse) # needed for data manipulation.
library(RColorBrewer) # needed for some extra colours in one of the graphs
library(ggmcmc)
library(ggthemes)
library(ggridges)
detach("package:ggplot2", unload = TRUE)
library(ggplot2)
detach("package:ggplot2", unload = TRUE)
remove.packages("ggmcmc", lib="~/R/win-library/3.6")
remove.packages("ggridges", lib="~/R/win-library/3.6")
remove.packages("ggthemes", lib="~/R/win-library/3.6")
install.packages("ggmcmc")
install.packages("ggmcmc")
install.packages("ggthemes")
install.packages("ggridges")
install.packages(c("cli", "data.table", "digest", "dplyr", "fansi", "farver", "ggplot2", "glue", "gtools", "lifecycle", "pillar", "plyr", "Rcpp", "stringi", "tibble", "tidyr", "tidyselect"))
install.packages(c("cli", "data.table", "digest", "dplyr", "fansi", "farver", "ggplot2", "glue", "gtools", "lifecycle", "pillar", "plyr", "Rcpp", "stringi", "tibble", "tidyr", "tidyselect"))
install.packages(c("cli", "data.table", "digest", "dplyr", "fansi", "farver", "ggplot2", "glue", "gtools", "lifecycle", "pillar", "plyr", "Rcpp", "stringi", "tibble", "tidyr", "tidyselect"))
install.packages(c("cli", "data.table", "digest", "dplyr", "fansi", "farver", "ggplot2", "glue", "gtools", "lifecycle", "pillar", "plyr", "Rcpp", "stringi", "tibble", "tidyr", "tidyselect"))
library(brms) # for the analysis
#library(haven) # to load the SPSS .sav file
library(tidyverse) # needed for data manipulation.
library(RColorBrewer) # needed for some extra colours in one of the graphs
library(ggmcmc)
library(ggthemes)
library(ggridges)
remove.packages("brms", lib="~/R/win-library/3.6")
install.packages("brms")
install.packages("brms")
install.packages("brms")
install.packages("brms")
library(brms) # for the analysis
library(haven) # to load the SPSS .sav file
library(tidyverse) # needed for data manipulation.
library(RColorBrewer) # needed for some extra colours in one of the graphs
library(ggmcmc)
library(ggthemes)
library(ggridges)
detach("package:brms", unload = TRUE)
detach("package:dplyr", unload = TRUE)
detach("package:forcats", unload = TRUE)
detach("package:ggmcmc", unload = TRUE)
detach("package:ggplot2", unload = TRUE)
detach("package:ggridges", unload = TRUE)
detach("package:ggthemes", unload = TRUE)
detach("package:haven", unload = TRUE)
remove.packages("haven", lib="~/R/win-library/3.6")
install.packages("hevan")
install.packages("haven")
install.packages("haven")
library(brms) # for the analysis
library(haven) # to load the SPSS .sav file
install.packages("haven")
install.packages("haven")
library(brms) # for the analysis
library(haven) # to load the SPSS .sav file
